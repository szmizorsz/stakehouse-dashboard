schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Depositor {
  id: ID!
  lpAddress: String!
  amount: BigInt!
}

input Depositor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  lpAddress: String
  lpAddress_not: String
  lpAddress_gt: String
  lpAddress_lt: String
  lpAddress_gte: String
  lpAddress_lte: String
  lpAddress_in: [String!]
  lpAddress_not_in: [String!]
  lpAddress_contains: String
  lpAddress_contains_nocase: String
  lpAddress_not_contains: String
  lpAddress_not_contains_nocase: String
  lpAddress_starts_with: String
  lpAddress_starts_with_nocase: String
  lpAddress_not_starts_with: String
  lpAddress_not_starts_with_nocase: String
  lpAddress_ends_with: String
  lpAddress_ends_with_nocase: String
  lpAddress_not_ends_with: String
  lpAddress_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Depositor_filter]
  or: [Depositor_filter]
}

enum Depositor_orderBy {
  id
  lpAddress
  amount
}

type Event {
  id: ID!
  tx: String!
  from: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  blsPubKeyForKnot: String!
  key: String!
  value: String!
  value2: String
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tx: String
  tx_not: String
  tx_gt: String
  tx_lt: String
  tx_gte: String
  tx_lte: String
  tx_in: [String!]
  tx_not_in: [String!]
  tx_contains: String
  tx_contains_nocase: String
  tx_not_contains: String
  tx_not_contains_nocase: String
  tx_starts_with: String
  tx_starts_with_nocase: String
  tx_not_starts_with: String
  tx_not_starts_with_nocase: String
  tx_ends_with: String
  tx_ends_with_nocase: String
  tx_not_ends_with: String
  tx_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  blsPubKeyForKnot: String
  blsPubKeyForKnot_not: String
  blsPubKeyForKnot_gt: String
  blsPubKeyForKnot_lt: String
  blsPubKeyForKnot_gte: String
  blsPubKeyForKnot_lte: String
  blsPubKeyForKnot_in: [String!]
  blsPubKeyForKnot_not_in: [String!]
  blsPubKeyForKnot_contains: String
  blsPubKeyForKnot_contains_nocase: String
  blsPubKeyForKnot_not_contains: String
  blsPubKeyForKnot_not_contains_nocase: String
  blsPubKeyForKnot_starts_with: String
  blsPubKeyForKnot_starts_with_nocase: String
  blsPubKeyForKnot_not_starts_with: String
  blsPubKeyForKnot_not_starts_with_nocase: String
  blsPubKeyForKnot_ends_with: String
  blsPubKeyForKnot_ends_with_nocase: String
  blsPubKeyForKnot_not_ends_with: String
  blsPubKeyForKnot_not_ends_with_nocase: String
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  value: String
  value_not: String
  value_gt: String
  value_lt: String
  value_gte: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_contains_nocase: String
  value_not_contains: String
  value_not_contains_nocase: String
  value_starts_with: String
  value_starts_with_nocase: String
  value_not_starts_with: String
  value_not_starts_with_nocase: String
  value_ends_with: String
  value_ends_with_nocase: String
  value_not_ends_with: String
  value_not_ends_with_nocase: String
  value2: String
  value2_not: String
  value2_gt: String
  value2_lt: String
  value2_gte: String
  value2_lte: String
  value2_in: [String!]
  value2_not_in: [String!]
  value2_contains: String
  value2_contains_nocase: String
  value2_not_contains: String
  value2_not_contains_nocase: String
  value2_starts_with: String
  value2_starts_with_nocase: String
  value2_not_starts_with: String
  value2_not_starts_with_nocase: String
  value2_ends_with: String
  value2_ends_with_nocase: String
  value2_not_ends_with: String
  value2_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Event_filter]
  or: [Event_filter]
}

enum Event_orderBy {
  id
  tx
  from
  blockNumber
  blockTimestamp
  blsPubKeyForKnot
  key
  value
  value2
}

type FeesAndMevBatch {
  id: ID!
  blsPublicKey: String
  vaultLPToken: LPToken
  lsdValidator: LSDValidator
  listOfLiquidityProviderAddresses: [String!]!
  liquidityProviders(skip: Int = 0, first: Int = 100, orderBy: GiantFeesAndMevLiquidityProvider_orderBy, orderDirection: OrderDirection, where: GiantFeesAndMevLiquidityProvider_filter): [GiantFeesAndMevLiquidityProvider!]!
}

input FeesAndMevBatch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blsPublicKey: String
  blsPublicKey_not: String
  blsPublicKey_gt: String
  blsPublicKey_lt: String
  blsPublicKey_gte: String
  blsPublicKey_lte: String
  blsPublicKey_in: [String!]
  blsPublicKey_not_in: [String!]
  blsPublicKey_contains: String
  blsPublicKey_contains_nocase: String
  blsPublicKey_not_contains: String
  blsPublicKey_not_contains_nocase: String
  blsPublicKey_starts_with: String
  blsPublicKey_starts_with_nocase: String
  blsPublicKey_not_starts_with: String
  blsPublicKey_not_starts_with_nocase: String
  blsPublicKey_ends_with: String
  blsPublicKey_ends_with_nocase: String
  blsPublicKey_not_ends_with: String
  blsPublicKey_not_ends_with_nocase: String
  vaultLPToken_: LPToken_filter
  lsdValidator: String
  lsdValidator_not: String
  lsdValidator_gt: String
  lsdValidator_lt: String
  lsdValidator_gte: String
  lsdValidator_lte: String
  lsdValidator_in: [String!]
  lsdValidator_not_in: [String!]
  lsdValidator_contains: String
  lsdValidator_contains_nocase: String
  lsdValidator_not_contains: String
  lsdValidator_not_contains_nocase: String
  lsdValidator_starts_with: String
  lsdValidator_starts_with_nocase: String
  lsdValidator_not_starts_with: String
  lsdValidator_not_starts_with_nocase: String
  lsdValidator_ends_with: String
  lsdValidator_ends_with_nocase: String
  lsdValidator_not_ends_with: String
  lsdValidator_not_ends_with_nocase: String
  lsdValidator_: LSDValidator_filter
  listOfLiquidityProviderAddresses: [String!]
  listOfLiquidityProviderAddresses_not: [String!]
  listOfLiquidityProviderAddresses_contains: [String!]
  listOfLiquidityProviderAddresses_contains_nocase: [String!]
  listOfLiquidityProviderAddresses_not_contains: [String!]
  listOfLiquidityProviderAddresses_not_contains_nocase: [String!]
  liquidityProviders: [String!]
  liquidityProviders_not: [String!]
  liquidityProviders_contains: [String!]
  liquidityProviders_contains_nocase: [String!]
  liquidityProviders_not_contains: [String!]
  liquidityProviders_not_contains_nocase: [String!]
  liquidityProviders_: GiantFeesAndMevLiquidityProvider_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeesAndMevBatch_filter]
  or: [FeesAndMevBatch_filter]
}

enum FeesAndMevBatch_orderBy {
  id
  blsPublicKey
  vaultLPToken
  vaultLPToken__id
  vaultLPToken__blsPublicKey
  vaultLPToken__minted
  vaultLPToken__withdrawn
  vaultLPToken__issuer
  vaultLPToken__tokenType
  vaultLPToken__giantPoolBalance
  vaultLPToken__lifecycleStatus
  lsdValidator
  lsdValidator__id
  lsdValidator__status
  lsdValidator__isReadyToStake
  lsdValidator__liquidStakingManager
  lsdValidator__withdrawn
  lsdValidator__currentIndex
  lsdValidator__totalETHStaked
  lsdValidator__totalETHFundedFromGiantPool
  lsdValidator__totalETHFromGiantProtectedStakingPool
  lsdValidator__totalETHFromGiantFeesAndMevPool
  lsdValidator__giantPoolLastFundedTimestamp
  lsdValidator__registerInitialsBlockNumber
  lsdValidator__ethSentToDepositContractBlockNumber
  lsdValidator__derivativesMintedBlockNumber
  listOfLiquidityProviderAddresses
  liquidityProviders
}

type FeesAndMevDeposit {
  id: ID!
  liquidStakingNetwork: LiquidStakingNetwork!
  validator: LSDValidator!
  token: String!
  depositor: String!
  totalDeposit: BigInt!
}

input FeesAndMevDeposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidStakingNetwork: String
  liquidStakingNetwork_not: String
  liquidStakingNetwork_gt: String
  liquidStakingNetwork_lt: String
  liquidStakingNetwork_gte: String
  liquidStakingNetwork_lte: String
  liquidStakingNetwork_in: [String!]
  liquidStakingNetwork_not_in: [String!]
  liquidStakingNetwork_contains: String
  liquidStakingNetwork_contains_nocase: String
  liquidStakingNetwork_not_contains: String
  liquidStakingNetwork_not_contains_nocase: String
  liquidStakingNetwork_starts_with: String
  liquidStakingNetwork_starts_with_nocase: String
  liquidStakingNetwork_not_starts_with: String
  liquidStakingNetwork_not_starts_with_nocase: String
  liquidStakingNetwork_ends_with: String
  liquidStakingNetwork_ends_with_nocase: String
  liquidStakingNetwork_not_ends_with: String
  liquidStakingNetwork_not_ends_with_nocase: String
  liquidStakingNetwork_: LiquidStakingNetwork_filter
  validator: String
  validator_not: String
  validator_gt: String
  validator_lt: String
  validator_gte: String
  validator_lte: String
  validator_in: [String!]
  validator_not_in: [String!]
  validator_contains: String
  validator_contains_nocase: String
  validator_not_contains: String
  validator_not_contains_nocase: String
  validator_starts_with: String
  validator_starts_with_nocase: String
  validator_not_starts_with: String
  validator_not_starts_with_nocase: String
  validator_ends_with: String
  validator_ends_with_nocase: String
  validator_not_ends_with: String
  validator_not_ends_with_nocase: String
  validator_: LSDValidator_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  depositor: String
  depositor_not: String
  depositor_gt: String
  depositor_lt: String
  depositor_gte: String
  depositor_lte: String
  depositor_in: [String!]
  depositor_not_in: [String!]
  depositor_contains: String
  depositor_contains_nocase: String
  depositor_not_contains: String
  depositor_not_contains_nocase: String
  depositor_starts_with: String
  depositor_starts_with_nocase: String
  depositor_not_starts_with: String
  depositor_not_starts_with_nocase: String
  depositor_ends_with: String
  depositor_ends_with_nocase: String
  depositor_not_ends_with: String
  depositor_not_ends_with_nocase: String
  totalDeposit: BigInt
  totalDeposit_not: BigInt
  totalDeposit_gt: BigInt
  totalDeposit_lt: BigInt
  totalDeposit_gte: BigInt
  totalDeposit_lte: BigInt
  totalDeposit_in: [BigInt!]
  totalDeposit_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FeesAndMevDeposit_filter]
  or: [FeesAndMevDeposit_filter]
}

enum FeesAndMevDeposit_orderBy {
  id
  liquidStakingNetwork
  liquidStakingNetwork__id
  liquidStakingNetwork__liquidStakingManager
  liquidStakingNetwork__dao
  liquidStakingNetwork__feeRecipientAndSyndicate
  liquidStakingNetwork__savETHPool
  liquidStakingNetwork__feesAndMevPool
  liquidStakingNetwork__stakehouseAddress
  liquidStakingNetwork__optionalGatekeeper
  liquidStakingNetwork__lsdIndex
  liquidStakingNetwork__ticker
  liquidStakingNetwork__commission
  liquidStakingNetwork__isNodeRunningBehindGatekeeper
  liquidStakingNetwork__firstKnot
  liquidStakingNetwork__numberOfValidatorsBeingPrepared
  liquidStakingNetwork__numberOfStakedValidators
  liquidStakingNetwork__numberOfKnotsThatHaveMintedDerivatives
  validator
  validator__id
  validator__status
  validator__isReadyToStake
  validator__liquidStakingManager
  validator__withdrawn
  validator__currentIndex
  validator__totalETHStaked
  validator__totalETHFundedFromGiantPool
  validator__totalETHFromGiantProtectedStakingPool
  validator__totalETHFromGiantFeesAndMevPool
  validator__giantPoolLastFundedTimestamp
  validator__registerInitialsBlockNumber
  validator__ethSentToDepositContractBlockNumber
  validator__derivativesMintedBlockNumber
  token
  depositor
  totalDeposit
}

type GiantFeesAndMevLiquidityProvider {
  id: ID!
  lpAddress: String!
  amount: BigInt!
  batch: BigInt!
  contractAddress: String!
  withdrawn: BigInt!
}

input GiantFeesAndMevLiquidityProvider_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  lpAddress: String
  lpAddress_not: String
  lpAddress_gt: String
  lpAddress_lt: String
  lpAddress_gte: String
  lpAddress_lte: String
  lpAddress_in: [String!]
  lpAddress_not_in: [String!]
  lpAddress_contains: String
  lpAddress_contains_nocase: String
  lpAddress_not_contains: String
  lpAddress_not_contains_nocase: String
  lpAddress_starts_with: String
  lpAddress_starts_with_nocase: String
  lpAddress_not_starts_with: String
  lpAddress_not_starts_with_nocase: String
  lpAddress_ends_with: String
  lpAddress_ends_with_nocase: String
  lpAddress_not_ends_with: String
  lpAddress_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  batch: BigInt
  batch_not: BigInt
  batch_gt: BigInt
  batch_lt: BigInt
  batch_gte: BigInt
  batch_lte: BigInt
  batch_in: [BigInt!]
  batch_not_in: [BigInt!]
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  withdrawn: BigInt
  withdrawn_not: BigInt
  withdrawn_gt: BigInt
  withdrawn_lt: BigInt
  withdrawn_gte: BigInt
  withdrawn_lte: BigInt
  withdrawn_in: [BigInt!]
  withdrawn_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GiantFeesAndMevLiquidityProvider_filter]
  or: [GiantFeesAndMevLiquidityProvider_filter]
}

enum GiantFeesAndMevLiquidityProvider_orderBy {
  id
  lpAddress
  amount
  batch
  contractAddress
  withdrawn
}

type GiantFeesAndMevPool {
  id: ID!
  contractAddress: String!
  availableToStake: BigInt!
  sentToLiquidStakingNetworks: BigInt!
  giantLPToken: String!
}

input GiantFeesAndMevPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  availableToStake: BigInt
  availableToStake_not: BigInt
  availableToStake_gt: BigInt
  availableToStake_lt: BigInt
  availableToStake_gte: BigInt
  availableToStake_lte: BigInt
  availableToStake_in: [BigInt!]
  availableToStake_not_in: [BigInt!]
  sentToLiquidStakingNetworks: BigInt
  sentToLiquidStakingNetworks_not: BigInt
  sentToLiquidStakingNetworks_gt: BigInt
  sentToLiquidStakingNetworks_lt: BigInt
  sentToLiquidStakingNetworks_gte: BigInt
  sentToLiquidStakingNetworks_lte: BigInt
  sentToLiquidStakingNetworks_in: [BigInt!]
  sentToLiquidStakingNetworks_not_in: [BigInt!]
  giantLPToken: String
  giantLPToken_not: String
  giantLPToken_gt: String
  giantLPToken_lt: String
  giantLPToken_gte: String
  giantLPToken_lte: String
  giantLPToken_in: [String!]
  giantLPToken_not_in: [String!]
  giantLPToken_contains: String
  giantLPToken_contains_nocase: String
  giantLPToken_not_contains: String
  giantLPToken_not_contains_nocase: String
  giantLPToken_starts_with: String
  giantLPToken_starts_with_nocase: String
  giantLPToken_not_starts_with: String
  giantLPToken_not_starts_with_nocase: String
  giantLPToken_ends_with: String
  giantLPToken_ends_with_nocase: String
  giantLPToken_not_ends_with: String
  giantLPToken_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GiantFeesAndMevPool_filter]
  or: [GiantFeesAndMevPool_filter]
}

enum GiantFeesAndMevPool_orderBy {
  id
  contractAddress
  availableToStake
  sentToLiquidStakingNetworks
  giantLPToken
}

type GiantLiquidityProvider {
  id: ID!
  lpAddress: String!
  amount: BigInt!
  batch: BigInt!
  contractAddress: String!
  withdrawn: BigInt!
}

input GiantLiquidityProvider_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  lpAddress: String
  lpAddress_not: String
  lpAddress_gt: String
  lpAddress_lt: String
  lpAddress_gte: String
  lpAddress_lte: String
  lpAddress_in: [String!]
  lpAddress_not_in: [String!]
  lpAddress_contains: String
  lpAddress_contains_nocase: String
  lpAddress_not_contains: String
  lpAddress_not_contains_nocase: String
  lpAddress_starts_with: String
  lpAddress_starts_with_nocase: String
  lpAddress_not_starts_with: String
  lpAddress_not_starts_with_nocase: String
  lpAddress_ends_with: String
  lpAddress_ends_with_nocase: String
  lpAddress_not_ends_with: String
  lpAddress_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  batch: BigInt
  batch_not: BigInt
  batch_gt: BigInt
  batch_lt: BigInt
  batch_gte: BigInt
  batch_lte: BigInt
  batch_in: [BigInt!]
  batch_not_in: [BigInt!]
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  withdrawn: BigInt
  withdrawn_not: BigInt
  withdrawn_gt: BigInt
  withdrawn_lt: BigInt
  withdrawn_gte: BigInt
  withdrawn_lte: BigInt
  withdrawn_in: [BigInt!]
  withdrawn_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GiantLiquidityProvider_filter]
  or: [GiantLiquidityProvider_filter]
}

enum GiantLiquidityProvider_orderBy {
  id
  lpAddress
  amount
  batch
  contractAddress
  withdrawn
}

type GiantSavETHPool {
  id: ID!
  contractAddress: String!
  availableToStake: BigInt!
  sentToLiquidStakingNetworks: BigInt!
  giantLPToken: String!
}

input GiantSavETHPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  availableToStake: BigInt
  availableToStake_not: BigInt
  availableToStake_gt: BigInt
  availableToStake_lt: BigInt
  availableToStake_gte: BigInt
  availableToStake_lte: BigInt
  availableToStake_in: [BigInt!]
  availableToStake_not_in: [BigInt!]
  sentToLiquidStakingNetworks: BigInt
  sentToLiquidStakingNetworks_not: BigInt
  sentToLiquidStakingNetworks_gt: BigInt
  sentToLiquidStakingNetworks_lt: BigInt
  sentToLiquidStakingNetworks_gte: BigInt
  sentToLiquidStakingNetworks_lte: BigInt
  sentToLiquidStakingNetworks_in: [BigInt!]
  sentToLiquidStakingNetworks_not_in: [BigInt!]
  giantLPToken: String
  giantLPToken_not: String
  giantLPToken_gt: String
  giantLPToken_lt: String
  giantLPToken_gte: String
  giantLPToken_lte: String
  giantLPToken_in: [String!]
  giantLPToken_not_in: [String!]
  giantLPToken_contains: String
  giantLPToken_contains_nocase: String
  giantLPToken_not_contains: String
  giantLPToken_not_contains_nocase: String
  giantLPToken_starts_with: String
  giantLPToken_starts_with_nocase: String
  giantLPToken_not_starts_with: String
  giantLPToken_not_starts_with_nocase: String
  giantLPToken_ends_with: String
  giantLPToken_ends_with_nocase: String
  giantLPToken_not_ends_with: String
  giantLPToken_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GiantSavETHPool_filter]
  or: [GiantSavETHPool_filter]
}

enum GiantSavETHPool_orderBy {
  id
  contractAddress
  availableToStake
  sentToLiquidStakingNetworks
  giantLPToken
}

type LPToken {
  id: ID!
  blsPublicKey: String!
  minted: BigInt!
  withdrawn: BigInt!
  liquidStakingNetwork: LiquidStakingNetwork!
  issuer: String!
  tokenType: String!
  giantPoolBalance: BigInt!
  lifecycleStatus: String!
  protectedBatch: ProtectedBatch
  feesAndMevBatch: FeesAndMevBatch
  liquidityProviders(skip: Int = 0, first: Int = 100, orderBy: Depositor_orderBy, orderDirection: OrderDirection, where: Depositor_filter): [Depositor!]!
}

input LPToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blsPublicKey: String
  blsPublicKey_not: String
  blsPublicKey_gt: String
  blsPublicKey_lt: String
  blsPublicKey_gte: String
  blsPublicKey_lte: String
  blsPublicKey_in: [String!]
  blsPublicKey_not_in: [String!]
  blsPublicKey_contains: String
  blsPublicKey_contains_nocase: String
  blsPublicKey_not_contains: String
  blsPublicKey_not_contains_nocase: String
  blsPublicKey_starts_with: String
  blsPublicKey_starts_with_nocase: String
  blsPublicKey_not_starts_with: String
  blsPublicKey_not_starts_with_nocase: String
  blsPublicKey_ends_with: String
  blsPublicKey_ends_with_nocase: String
  blsPublicKey_not_ends_with: String
  blsPublicKey_not_ends_with_nocase: String
  minted: BigInt
  minted_not: BigInt
  minted_gt: BigInt
  minted_lt: BigInt
  minted_gte: BigInt
  minted_lte: BigInt
  minted_in: [BigInt!]
  minted_not_in: [BigInt!]
  withdrawn: BigInt
  withdrawn_not: BigInt
  withdrawn_gt: BigInt
  withdrawn_lt: BigInt
  withdrawn_gte: BigInt
  withdrawn_lte: BigInt
  withdrawn_in: [BigInt!]
  withdrawn_not_in: [BigInt!]
  liquidStakingNetwork: String
  liquidStakingNetwork_not: String
  liquidStakingNetwork_gt: String
  liquidStakingNetwork_lt: String
  liquidStakingNetwork_gte: String
  liquidStakingNetwork_lte: String
  liquidStakingNetwork_in: [String!]
  liquidStakingNetwork_not_in: [String!]
  liquidStakingNetwork_contains: String
  liquidStakingNetwork_contains_nocase: String
  liquidStakingNetwork_not_contains: String
  liquidStakingNetwork_not_contains_nocase: String
  liquidStakingNetwork_starts_with: String
  liquidStakingNetwork_starts_with_nocase: String
  liquidStakingNetwork_not_starts_with: String
  liquidStakingNetwork_not_starts_with_nocase: String
  liquidStakingNetwork_ends_with: String
  liquidStakingNetwork_ends_with_nocase: String
  liquidStakingNetwork_not_ends_with: String
  liquidStakingNetwork_not_ends_with_nocase: String
  liquidStakingNetwork_: LiquidStakingNetwork_filter
  issuer: String
  issuer_not: String
  issuer_gt: String
  issuer_lt: String
  issuer_gte: String
  issuer_lte: String
  issuer_in: [String!]
  issuer_not_in: [String!]
  issuer_contains: String
  issuer_contains_nocase: String
  issuer_not_contains: String
  issuer_not_contains_nocase: String
  issuer_starts_with: String
  issuer_starts_with_nocase: String
  issuer_not_starts_with: String
  issuer_not_starts_with_nocase: String
  issuer_ends_with: String
  issuer_ends_with_nocase: String
  issuer_not_ends_with: String
  issuer_not_ends_with_nocase: String
  tokenType: String
  tokenType_not: String
  tokenType_gt: String
  tokenType_lt: String
  tokenType_gte: String
  tokenType_lte: String
  tokenType_in: [String!]
  tokenType_not_in: [String!]
  tokenType_contains: String
  tokenType_contains_nocase: String
  tokenType_not_contains: String
  tokenType_not_contains_nocase: String
  tokenType_starts_with: String
  tokenType_starts_with_nocase: String
  tokenType_not_starts_with: String
  tokenType_not_starts_with_nocase: String
  tokenType_ends_with: String
  tokenType_ends_with_nocase: String
  tokenType_not_ends_with: String
  tokenType_not_ends_with_nocase: String
  giantPoolBalance: BigInt
  giantPoolBalance_not: BigInt
  giantPoolBalance_gt: BigInt
  giantPoolBalance_lt: BigInt
  giantPoolBalance_gte: BigInt
  giantPoolBalance_lte: BigInt
  giantPoolBalance_in: [BigInt!]
  giantPoolBalance_not_in: [BigInt!]
  lifecycleStatus: String
  lifecycleStatus_not: String
  lifecycleStatus_gt: String
  lifecycleStatus_lt: String
  lifecycleStatus_gte: String
  lifecycleStatus_lte: String
  lifecycleStatus_in: [String!]
  lifecycleStatus_not_in: [String!]
  lifecycleStatus_contains: String
  lifecycleStatus_contains_nocase: String
  lifecycleStatus_not_contains: String
  lifecycleStatus_not_contains_nocase: String
  lifecycleStatus_starts_with: String
  lifecycleStatus_starts_with_nocase: String
  lifecycleStatus_not_starts_with: String
  lifecycleStatus_not_starts_with_nocase: String
  lifecycleStatus_ends_with: String
  lifecycleStatus_ends_with_nocase: String
  lifecycleStatus_not_ends_with: String
  lifecycleStatus_not_ends_with_nocase: String
  protectedBatch: String
  protectedBatch_not: String
  protectedBatch_gt: String
  protectedBatch_lt: String
  protectedBatch_gte: String
  protectedBatch_lte: String
  protectedBatch_in: [String!]
  protectedBatch_not_in: [String!]
  protectedBatch_contains: String
  protectedBatch_contains_nocase: String
  protectedBatch_not_contains: String
  protectedBatch_not_contains_nocase: String
  protectedBatch_starts_with: String
  protectedBatch_starts_with_nocase: String
  protectedBatch_not_starts_with: String
  protectedBatch_not_starts_with_nocase: String
  protectedBatch_ends_with: String
  protectedBatch_ends_with_nocase: String
  protectedBatch_not_ends_with: String
  protectedBatch_not_ends_with_nocase: String
  protectedBatch_: ProtectedBatch_filter
  feesAndMevBatch: String
  feesAndMevBatch_not: String
  feesAndMevBatch_gt: String
  feesAndMevBatch_lt: String
  feesAndMevBatch_gte: String
  feesAndMevBatch_lte: String
  feesAndMevBatch_in: [String!]
  feesAndMevBatch_not_in: [String!]
  feesAndMevBatch_contains: String
  feesAndMevBatch_contains_nocase: String
  feesAndMevBatch_not_contains: String
  feesAndMevBatch_not_contains_nocase: String
  feesAndMevBatch_starts_with: String
  feesAndMevBatch_starts_with_nocase: String
  feesAndMevBatch_not_starts_with: String
  feesAndMevBatch_not_starts_with_nocase: String
  feesAndMevBatch_ends_with: String
  feesAndMevBatch_ends_with_nocase: String
  feesAndMevBatch_not_ends_with: String
  feesAndMevBatch_not_ends_with_nocase: String
  feesAndMevBatch_: FeesAndMevBatch_filter
  liquidityProviders: [String!]
  liquidityProviders_not: [String!]
  liquidityProviders_contains: [String!]
  liquidityProviders_contains_nocase: [String!]
  liquidityProviders_not_contains: [String!]
  liquidityProviders_not_contains_nocase: [String!]
  liquidityProviders_: Depositor_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LPToken_filter]
  or: [LPToken_filter]
}

enum LPToken_orderBy {
  id
  blsPublicKey
  minted
  withdrawn
  liquidStakingNetwork
  liquidStakingNetwork__id
  liquidStakingNetwork__liquidStakingManager
  liquidStakingNetwork__dao
  liquidStakingNetwork__feeRecipientAndSyndicate
  liquidStakingNetwork__savETHPool
  liquidStakingNetwork__feesAndMevPool
  liquidStakingNetwork__stakehouseAddress
  liquidStakingNetwork__optionalGatekeeper
  liquidStakingNetwork__lsdIndex
  liquidStakingNetwork__ticker
  liquidStakingNetwork__commission
  liquidStakingNetwork__isNodeRunningBehindGatekeeper
  liquidStakingNetwork__firstKnot
  liquidStakingNetwork__numberOfValidatorsBeingPrepared
  liquidStakingNetwork__numberOfStakedValidators
  liquidStakingNetwork__numberOfKnotsThatHaveMintedDerivatives
  issuer
  tokenType
  giantPoolBalance
  lifecycleStatus
  protectedBatch
  protectedBatch__id
  protectedBatch__blsPublicKey
  feesAndMevBatch
  feesAndMevBatch__id
  feesAndMevBatch__blsPublicKey
  liquidityProviders
}

type LSDValidator {
  id: ID!
  smartWallet: SmartWallet!
  status: String!
  isReadyToStake: Boolean!
  liquidStakingManager: String!
  withdrawn: Boolean!
  currentIndex: BigInt
  totalETHStaked: BigInt!
  totalETHFundedFromGiantPool: BigInt!
  totalETHFromGiantProtectedStakingPool: BigInt!
  totalETHFromGiantFeesAndMevPool: BigInt!
  giantPoolLastFundedTimestamp: BigInt!
  registerInitialsBlockNumber: BigInt!
  ethSentToDepositContractBlockNumber: BigInt!
  derivativesMintedBlockNumber: BigInt!
}

input LSDValidator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  smartWallet: String
  smartWallet_not: String
  smartWallet_gt: String
  smartWallet_lt: String
  smartWallet_gte: String
  smartWallet_lte: String
  smartWallet_in: [String!]
  smartWallet_not_in: [String!]
  smartWallet_contains: String
  smartWallet_contains_nocase: String
  smartWallet_not_contains: String
  smartWallet_not_contains_nocase: String
  smartWallet_starts_with: String
  smartWallet_starts_with_nocase: String
  smartWallet_not_starts_with: String
  smartWallet_not_starts_with_nocase: String
  smartWallet_ends_with: String
  smartWallet_ends_with_nocase: String
  smartWallet_not_ends_with: String
  smartWallet_not_ends_with_nocase: String
  smartWallet_: SmartWallet_filter
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  isReadyToStake: Boolean
  isReadyToStake_not: Boolean
  isReadyToStake_in: [Boolean!]
  isReadyToStake_not_in: [Boolean!]
  liquidStakingManager: String
  liquidStakingManager_not: String
  liquidStakingManager_gt: String
  liquidStakingManager_lt: String
  liquidStakingManager_gte: String
  liquidStakingManager_lte: String
  liquidStakingManager_in: [String!]
  liquidStakingManager_not_in: [String!]
  liquidStakingManager_contains: String
  liquidStakingManager_contains_nocase: String
  liquidStakingManager_not_contains: String
  liquidStakingManager_not_contains_nocase: String
  liquidStakingManager_starts_with: String
  liquidStakingManager_starts_with_nocase: String
  liquidStakingManager_not_starts_with: String
  liquidStakingManager_not_starts_with_nocase: String
  liquidStakingManager_ends_with: String
  liquidStakingManager_ends_with_nocase: String
  liquidStakingManager_not_ends_with: String
  liquidStakingManager_not_ends_with_nocase: String
  withdrawn: Boolean
  withdrawn_not: Boolean
  withdrawn_in: [Boolean!]
  withdrawn_not_in: [Boolean!]
  currentIndex: BigInt
  currentIndex_not: BigInt
  currentIndex_gt: BigInt
  currentIndex_lt: BigInt
  currentIndex_gte: BigInt
  currentIndex_lte: BigInt
  currentIndex_in: [BigInt!]
  currentIndex_not_in: [BigInt!]
  totalETHStaked: BigInt
  totalETHStaked_not: BigInt
  totalETHStaked_gt: BigInt
  totalETHStaked_lt: BigInt
  totalETHStaked_gte: BigInt
  totalETHStaked_lte: BigInt
  totalETHStaked_in: [BigInt!]
  totalETHStaked_not_in: [BigInt!]
  totalETHFundedFromGiantPool: BigInt
  totalETHFundedFromGiantPool_not: BigInt
  totalETHFundedFromGiantPool_gt: BigInt
  totalETHFundedFromGiantPool_lt: BigInt
  totalETHFundedFromGiantPool_gte: BigInt
  totalETHFundedFromGiantPool_lte: BigInt
  totalETHFundedFromGiantPool_in: [BigInt!]
  totalETHFundedFromGiantPool_not_in: [BigInt!]
  totalETHFromGiantProtectedStakingPool: BigInt
  totalETHFromGiantProtectedStakingPool_not: BigInt
  totalETHFromGiantProtectedStakingPool_gt: BigInt
  totalETHFromGiantProtectedStakingPool_lt: BigInt
  totalETHFromGiantProtectedStakingPool_gte: BigInt
  totalETHFromGiantProtectedStakingPool_lte: BigInt
  totalETHFromGiantProtectedStakingPool_in: [BigInt!]
  totalETHFromGiantProtectedStakingPool_not_in: [BigInt!]
  totalETHFromGiantFeesAndMevPool: BigInt
  totalETHFromGiantFeesAndMevPool_not: BigInt
  totalETHFromGiantFeesAndMevPool_gt: BigInt
  totalETHFromGiantFeesAndMevPool_lt: BigInt
  totalETHFromGiantFeesAndMevPool_gte: BigInt
  totalETHFromGiantFeesAndMevPool_lte: BigInt
  totalETHFromGiantFeesAndMevPool_in: [BigInt!]
  totalETHFromGiantFeesAndMevPool_not_in: [BigInt!]
  giantPoolLastFundedTimestamp: BigInt
  giantPoolLastFundedTimestamp_not: BigInt
  giantPoolLastFundedTimestamp_gt: BigInt
  giantPoolLastFundedTimestamp_lt: BigInt
  giantPoolLastFundedTimestamp_gte: BigInt
  giantPoolLastFundedTimestamp_lte: BigInt
  giantPoolLastFundedTimestamp_in: [BigInt!]
  giantPoolLastFundedTimestamp_not_in: [BigInt!]
  registerInitialsBlockNumber: BigInt
  registerInitialsBlockNumber_not: BigInt
  registerInitialsBlockNumber_gt: BigInt
  registerInitialsBlockNumber_lt: BigInt
  registerInitialsBlockNumber_gte: BigInt
  registerInitialsBlockNumber_lte: BigInt
  registerInitialsBlockNumber_in: [BigInt!]
  registerInitialsBlockNumber_not_in: [BigInt!]
  ethSentToDepositContractBlockNumber: BigInt
  ethSentToDepositContractBlockNumber_not: BigInt
  ethSentToDepositContractBlockNumber_gt: BigInt
  ethSentToDepositContractBlockNumber_lt: BigInt
  ethSentToDepositContractBlockNumber_gte: BigInt
  ethSentToDepositContractBlockNumber_lte: BigInt
  ethSentToDepositContractBlockNumber_in: [BigInt!]
  ethSentToDepositContractBlockNumber_not_in: [BigInt!]
  derivativesMintedBlockNumber: BigInt
  derivativesMintedBlockNumber_not: BigInt
  derivativesMintedBlockNumber_gt: BigInt
  derivativesMintedBlockNumber_lt: BigInt
  derivativesMintedBlockNumber_gte: BigInt
  derivativesMintedBlockNumber_lte: BigInt
  derivativesMintedBlockNumber_in: [BigInt!]
  derivativesMintedBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LSDValidator_filter]
  or: [LSDValidator_filter]
}

enum LSDValidator_orderBy {
  id
  smartWallet
  smartWallet__id
  smartWallet__availableToStake
  smartWallet__inProcessOfAwaitingActivation
  status
  isReadyToStake
  liquidStakingManager
  withdrawn
  currentIndex
  totalETHStaked
  totalETHFundedFromGiantPool
  totalETHFromGiantProtectedStakingPool
  totalETHFromGiantFeesAndMevPool
  giantPoolLastFundedTimestamp
  registerInitialsBlockNumber
  ethSentToDepositContractBlockNumber
  derivativesMintedBlockNumber
}

type LiquidStakingNetwork {
  id: ID!
  liquidStakingManager: Bytes!
  dao: Bytes!
  feeRecipientAndSyndicate: Bytes!
  savETHPool: Bytes!
  feesAndMevPool: Bytes!
  stakehouseAddress: Bytes
  optionalGatekeeper: Bytes
  lsdIndex: BigInt!
  ticker: String!
  commission: BigInt!
  isNodeRunningBehindGatekeeper: Boolean!
  firstKnot: String
  numberOfValidatorsBeingPrepared: BigInt!
  numberOfStakedValidators: BigInt!
  numberOfKnotsThatHaveMintedDerivatives: BigInt!
}

input LiquidStakingNetwork_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidStakingManager: Bytes
  liquidStakingManager_not: Bytes
  liquidStakingManager_gt: Bytes
  liquidStakingManager_lt: Bytes
  liquidStakingManager_gte: Bytes
  liquidStakingManager_lte: Bytes
  liquidStakingManager_in: [Bytes!]
  liquidStakingManager_not_in: [Bytes!]
  liquidStakingManager_contains: Bytes
  liquidStakingManager_not_contains: Bytes
  dao: Bytes
  dao_not: Bytes
  dao_gt: Bytes
  dao_lt: Bytes
  dao_gte: Bytes
  dao_lte: Bytes
  dao_in: [Bytes!]
  dao_not_in: [Bytes!]
  dao_contains: Bytes
  dao_not_contains: Bytes
  feeRecipientAndSyndicate: Bytes
  feeRecipientAndSyndicate_not: Bytes
  feeRecipientAndSyndicate_gt: Bytes
  feeRecipientAndSyndicate_lt: Bytes
  feeRecipientAndSyndicate_gte: Bytes
  feeRecipientAndSyndicate_lte: Bytes
  feeRecipientAndSyndicate_in: [Bytes!]
  feeRecipientAndSyndicate_not_in: [Bytes!]
  feeRecipientAndSyndicate_contains: Bytes
  feeRecipientAndSyndicate_not_contains: Bytes
  savETHPool: Bytes
  savETHPool_not: Bytes
  savETHPool_gt: Bytes
  savETHPool_lt: Bytes
  savETHPool_gte: Bytes
  savETHPool_lte: Bytes
  savETHPool_in: [Bytes!]
  savETHPool_not_in: [Bytes!]
  savETHPool_contains: Bytes
  savETHPool_not_contains: Bytes
  feesAndMevPool: Bytes
  feesAndMevPool_not: Bytes
  feesAndMevPool_gt: Bytes
  feesAndMevPool_lt: Bytes
  feesAndMevPool_gte: Bytes
  feesAndMevPool_lte: Bytes
  feesAndMevPool_in: [Bytes!]
  feesAndMevPool_not_in: [Bytes!]
  feesAndMevPool_contains: Bytes
  feesAndMevPool_not_contains: Bytes
  stakehouseAddress: Bytes
  stakehouseAddress_not: Bytes
  stakehouseAddress_gt: Bytes
  stakehouseAddress_lt: Bytes
  stakehouseAddress_gte: Bytes
  stakehouseAddress_lte: Bytes
  stakehouseAddress_in: [Bytes!]
  stakehouseAddress_not_in: [Bytes!]
  stakehouseAddress_contains: Bytes
  stakehouseAddress_not_contains: Bytes
  optionalGatekeeper: Bytes
  optionalGatekeeper_not: Bytes
  optionalGatekeeper_gt: Bytes
  optionalGatekeeper_lt: Bytes
  optionalGatekeeper_gte: Bytes
  optionalGatekeeper_lte: Bytes
  optionalGatekeeper_in: [Bytes!]
  optionalGatekeeper_not_in: [Bytes!]
  optionalGatekeeper_contains: Bytes
  optionalGatekeeper_not_contains: Bytes
  lsdIndex: BigInt
  lsdIndex_not: BigInt
  lsdIndex_gt: BigInt
  lsdIndex_lt: BigInt
  lsdIndex_gte: BigInt
  lsdIndex_lte: BigInt
  lsdIndex_in: [BigInt!]
  lsdIndex_not_in: [BigInt!]
  ticker: String
  ticker_not: String
  ticker_gt: String
  ticker_lt: String
  ticker_gte: String
  ticker_lte: String
  ticker_in: [String!]
  ticker_not_in: [String!]
  ticker_contains: String
  ticker_contains_nocase: String
  ticker_not_contains: String
  ticker_not_contains_nocase: String
  ticker_starts_with: String
  ticker_starts_with_nocase: String
  ticker_not_starts_with: String
  ticker_not_starts_with_nocase: String
  ticker_ends_with: String
  ticker_ends_with_nocase: String
  ticker_not_ends_with: String
  ticker_not_ends_with_nocase: String
  commission: BigInt
  commission_not: BigInt
  commission_gt: BigInt
  commission_lt: BigInt
  commission_gte: BigInt
  commission_lte: BigInt
  commission_in: [BigInt!]
  commission_not_in: [BigInt!]
  isNodeRunningBehindGatekeeper: Boolean
  isNodeRunningBehindGatekeeper_not: Boolean
  isNodeRunningBehindGatekeeper_in: [Boolean!]
  isNodeRunningBehindGatekeeper_not_in: [Boolean!]
  firstKnot: String
  firstKnot_not: String
  firstKnot_gt: String
  firstKnot_lt: String
  firstKnot_gte: String
  firstKnot_lte: String
  firstKnot_in: [String!]
  firstKnot_not_in: [String!]
  firstKnot_contains: String
  firstKnot_contains_nocase: String
  firstKnot_not_contains: String
  firstKnot_not_contains_nocase: String
  firstKnot_starts_with: String
  firstKnot_starts_with_nocase: String
  firstKnot_not_starts_with: String
  firstKnot_not_starts_with_nocase: String
  firstKnot_ends_with: String
  firstKnot_ends_with_nocase: String
  firstKnot_not_ends_with: String
  firstKnot_not_ends_with_nocase: String
  numberOfValidatorsBeingPrepared: BigInt
  numberOfValidatorsBeingPrepared_not: BigInt
  numberOfValidatorsBeingPrepared_gt: BigInt
  numberOfValidatorsBeingPrepared_lt: BigInt
  numberOfValidatorsBeingPrepared_gte: BigInt
  numberOfValidatorsBeingPrepared_lte: BigInt
  numberOfValidatorsBeingPrepared_in: [BigInt!]
  numberOfValidatorsBeingPrepared_not_in: [BigInt!]
  numberOfStakedValidators: BigInt
  numberOfStakedValidators_not: BigInt
  numberOfStakedValidators_gt: BigInt
  numberOfStakedValidators_lt: BigInt
  numberOfStakedValidators_gte: BigInt
  numberOfStakedValidators_lte: BigInt
  numberOfStakedValidators_in: [BigInt!]
  numberOfStakedValidators_not_in: [BigInt!]
  numberOfKnotsThatHaveMintedDerivatives: BigInt
  numberOfKnotsThatHaveMintedDerivatives_not: BigInt
  numberOfKnotsThatHaveMintedDerivatives_gt: BigInt
  numberOfKnotsThatHaveMintedDerivatives_lt: BigInt
  numberOfKnotsThatHaveMintedDerivatives_gte: BigInt
  numberOfKnotsThatHaveMintedDerivatives_lte: BigInt
  numberOfKnotsThatHaveMintedDerivatives_in: [BigInt!]
  numberOfKnotsThatHaveMintedDerivatives_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidStakingNetwork_filter]
  or: [LiquidStakingNetwork_filter]
}

enum LiquidStakingNetwork_orderBy {
  id
  liquidStakingManager
  dao
  feeRecipientAndSyndicate
  savETHPool
  feesAndMevPool
  stakehouseAddress
  optionalGatekeeper
  lsdIndex
  ticker
  commission
  isNodeRunningBehindGatekeeper
  firstKnot
  numberOfValidatorsBeingPrepared
  numberOfStakedValidators
  numberOfKnotsThatHaveMintedDerivatives
}

type NodeRunner {
  id: ID!
  name: String!
  smartWallets(skip: Int = 0, first: Int = 100, orderBy: SmartWallet_orderBy, orderDirection: OrderDirection, where: SmartWallet_filter): [SmartWallet!]!
  liquidStakingNetworks(skip: Int = 0, first: Int = 100, orderBy: LiquidStakingNetwork_orderBy, orderDirection: OrderDirection, where: LiquidStakingNetwork_filter): [LiquidStakingNetwork!]!
  validators(skip: Int = 0, first: Int = 100, orderBy: LSDValidator_orderBy, orderDirection: OrderDirection, where: LSDValidator_filter): [LSDValidator!]!
}

input NodeRunner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  smartWallets: [String!]
  smartWallets_not: [String!]
  smartWallets_contains: [String!]
  smartWallets_contains_nocase: [String!]
  smartWallets_not_contains: [String!]
  smartWallets_not_contains_nocase: [String!]
  smartWallets_: SmartWallet_filter
  liquidStakingNetworks: [String!]
  liquidStakingNetworks_not: [String!]
  liquidStakingNetworks_contains: [String!]
  liquidStakingNetworks_contains_nocase: [String!]
  liquidStakingNetworks_not_contains: [String!]
  liquidStakingNetworks_not_contains_nocase: [String!]
  liquidStakingNetworks_: LiquidStakingNetwork_filter
  validators: [String!]
  validators_not: [String!]
  validators_contains: [String!]
  validators_contains_nocase: [String!]
  validators_not_contains: [String!]
  validators_not_contains_nocase: [String!]
  validators_: LSDValidator_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NodeRunner_filter]
  or: [NodeRunner_filter]
}

enum NodeRunner_orderBy {
  id
  name
  smartWallets
  liquidStakingNetworks
  validators
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Payout {
  id: ID!
  user: String!
  amount: BigInt!
  recipient: String!
  blsPublicKey: String
  type: String!
  timestamp: BigInt!
}

input Payout_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  recipient: String
  recipient_not: String
  recipient_gt: String
  recipient_lt: String
  recipient_gte: String
  recipient_lte: String
  recipient_in: [String!]
  recipient_not_in: [String!]
  recipient_contains: String
  recipient_contains_nocase: String
  recipient_not_contains: String
  recipient_not_contains_nocase: String
  recipient_starts_with: String
  recipient_starts_with_nocase: String
  recipient_not_starts_with: String
  recipient_not_starts_with_nocase: String
  recipient_ends_with: String
  recipient_ends_with_nocase: String
  recipient_not_ends_with: String
  recipient_not_ends_with_nocase: String
  blsPublicKey: String
  blsPublicKey_not: String
  blsPublicKey_gt: String
  blsPublicKey_lt: String
  blsPublicKey_gte: String
  blsPublicKey_lte: String
  blsPublicKey_in: [String!]
  blsPublicKey_not_in: [String!]
  blsPublicKey_contains: String
  blsPublicKey_contains_nocase: String
  blsPublicKey_not_contains: String
  blsPublicKey_not_contains_nocase: String
  blsPublicKey_starts_with: String
  blsPublicKey_starts_with_nocase: String
  blsPublicKey_not_starts_with: String
  blsPublicKey_not_starts_with_nocase: String
  blsPublicKey_ends_with: String
  blsPublicKey_ends_with_nocase: String
  blsPublicKey_not_ends_with: String
  blsPublicKey_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Payout_filter]
  or: [Payout_filter]
}

enum Payout_orderBy {
  id
  user
  amount
  recipient
  blsPublicKey
  type
  timestamp
}

type ProtectedBatch {
  id: ID!
  blsPublicKey: String
  vaultLPToken: LPToken
  lsdValidator: LSDValidator
  listOfLiquidityProviderAddresses: [String!]!
  liquidityProviders(skip: Int = 0, first: Int = 100, orderBy: GiantLiquidityProvider_orderBy, orderDirection: OrderDirection, where: GiantLiquidityProvider_filter): [GiantLiquidityProvider!]!
}

input ProtectedBatch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blsPublicKey: String
  blsPublicKey_not: String
  blsPublicKey_gt: String
  blsPublicKey_lt: String
  blsPublicKey_gte: String
  blsPublicKey_lte: String
  blsPublicKey_in: [String!]
  blsPublicKey_not_in: [String!]
  blsPublicKey_contains: String
  blsPublicKey_contains_nocase: String
  blsPublicKey_not_contains: String
  blsPublicKey_not_contains_nocase: String
  blsPublicKey_starts_with: String
  blsPublicKey_starts_with_nocase: String
  blsPublicKey_not_starts_with: String
  blsPublicKey_not_starts_with_nocase: String
  blsPublicKey_ends_with: String
  blsPublicKey_ends_with_nocase: String
  blsPublicKey_not_ends_with: String
  blsPublicKey_not_ends_with_nocase: String
  vaultLPToken_: LPToken_filter
  lsdValidator: String
  lsdValidator_not: String
  lsdValidator_gt: String
  lsdValidator_lt: String
  lsdValidator_gte: String
  lsdValidator_lte: String
  lsdValidator_in: [String!]
  lsdValidator_not_in: [String!]
  lsdValidator_contains: String
  lsdValidator_contains_nocase: String
  lsdValidator_not_contains: String
  lsdValidator_not_contains_nocase: String
  lsdValidator_starts_with: String
  lsdValidator_starts_with_nocase: String
  lsdValidator_not_starts_with: String
  lsdValidator_not_starts_with_nocase: String
  lsdValidator_ends_with: String
  lsdValidator_ends_with_nocase: String
  lsdValidator_not_ends_with: String
  lsdValidator_not_ends_with_nocase: String
  lsdValidator_: LSDValidator_filter
  listOfLiquidityProviderAddresses: [String!]
  listOfLiquidityProviderAddresses_not: [String!]
  listOfLiquidityProviderAddresses_contains: [String!]
  listOfLiquidityProviderAddresses_contains_nocase: [String!]
  listOfLiquidityProviderAddresses_not_contains: [String!]
  listOfLiquidityProviderAddresses_not_contains_nocase: [String!]
  liquidityProviders: [String!]
  liquidityProviders_not: [String!]
  liquidityProviders_contains: [String!]
  liquidityProviders_contains_nocase: [String!]
  liquidityProviders_not_contains: [String!]
  liquidityProviders_not_contains_nocase: [String!]
  liquidityProviders_: GiantLiquidityProvider_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtectedBatch_filter]
  or: [ProtectedBatch_filter]
}

enum ProtectedBatch_orderBy {
  id
  blsPublicKey
  vaultLPToken
  vaultLPToken__id
  vaultLPToken__blsPublicKey
  vaultLPToken__minted
  vaultLPToken__withdrawn
  vaultLPToken__issuer
  vaultLPToken__tokenType
  vaultLPToken__giantPoolBalance
  vaultLPToken__lifecycleStatus
  lsdValidator
  lsdValidator__id
  lsdValidator__status
  lsdValidator__isReadyToStake
  lsdValidator__liquidStakingManager
  lsdValidator__withdrawn
  lsdValidator__currentIndex
  lsdValidator__totalETHStaked
  lsdValidator__totalETHFundedFromGiantPool
  lsdValidator__totalETHFromGiantProtectedStakingPool
  lsdValidator__totalETHFromGiantFeesAndMevPool
  lsdValidator__giantPoolLastFundedTimestamp
  lsdValidator__registerInitialsBlockNumber
  lsdValidator__ethSentToDepositContractBlockNumber
  lsdValidator__derivativesMintedBlockNumber
  listOfLiquidityProviderAddresses
  liquidityProviders
}

type ProtectedDeposit {
  id: ID!
  liquidStakingNetwork: LiquidStakingNetwork!
  validator: LSDValidator!
  token: String!
  depositor: String!
  totalDeposit: BigInt!
}

input ProtectedDeposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidStakingNetwork: String
  liquidStakingNetwork_not: String
  liquidStakingNetwork_gt: String
  liquidStakingNetwork_lt: String
  liquidStakingNetwork_gte: String
  liquidStakingNetwork_lte: String
  liquidStakingNetwork_in: [String!]
  liquidStakingNetwork_not_in: [String!]
  liquidStakingNetwork_contains: String
  liquidStakingNetwork_contains_nocase: String
  liquidStakingNetwork_not_contains: String
  liquidStakingNetwork_not_contains_nocase: String
  liquidStakingNetwork_starts_with: String
  liquidStakingNetwork_starts_with_nocase: String
  liquidStakingNetwork_not_starts_with: String
  liquidStakingNetwork_not_starts_with_nocase: String
  liquidStakingNetwork_ends_with: String
  liquidStakingNetwork_ends_with_nocase: String
  liquidStakingNetwork_not_ends_with: String
  liquidStakingNetwork_not_ends_with_nocase: String
  liquidStakingNetwork_: LiquidStakingNetwork_filter
  validator: String
  validator_not: String
  validator_gt: String
  validator_lt: String
  validator_gte: String
  validator_lte: String
  validator_in: [String!]
  validator_not_in: [String!]
  validator_contains: String
  validator_contains_nocase: String
  validator_not_contains: String
  validator_not_contains_nocase: String
  validator_starts_with: String
  validator_starts_with_nocase: String
  validator_not_starts_with: String
  validator_not_starts_with_nocase: String
  validator_ends_with: String
  validator_ends_with_nocase: String
  validator_not_ends_with: String
  validator_not_ends_with_nocase: String
  validator_: LSDValidator_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  depositor: String
  depositor_not: String
  depositor_gt: String
  depositor_lt: String
  depositor_gte: String
  depositor_lte: String
  depositor_in: [String!]
  depositor_not_in: [String!]
  depositor_contains: String
  depositor_contains_nocase: String
  depositor_not_contains: String
  depositor_not_contains_nocase: String
  depositor_starts_with: String
  depositor_starts_with_nocase: String
  depositor_not_starts_with: String
  depositor_not_starts_with_nocase: String
  depositor_ends_with: String
  depositor_ends_with_nocase: String
  depositor_not_ends_with: String
  depositor_not_ends_with_nocase: String
  totalDeposit: BigInt
  totalDeposit_not: BigInt
  totalDeposit_gt: BigInt
  totalDeposit_lt: BigInt
  totalDeposit_gte: BigInt
  totalDeposit_lte: BigInt
  totalDeposit_in: [BigInt!]
  totalDeposit_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtectedDeposit_filter]
  or: [ProtectedDeposit_filter]
}

enum ProtectedDeposit_orderBy {
  id
  liquidStakingNetwork
  liquidStakingNetwork__id
  liquidStakingNetwork__liquidStakingManager
  liquidStakingNetwork__dao
  liquidStakingNetwork__feeRecipientAndSyndicate
  liquidStakingNetwork__savETHPool
  liquidStakingNetwork__feesAndMevPool
  liquidStakingNetwork__stakehouseAddress
  liquidStakingNetwork__optionalGatekeeper
  liquidStakingNetwork__lsdIndex
  liquidStakingNetwork__ticker
  liquidStakingNetwork__commission
  liquidStakingNetwork__isNodeRunningBehindGatekeeper
  liquidStakingNetwork__firstKnot
  liquidStakingNetwork__numberOfValidatorsBeingPrepared
  liquidStakingNetwork__numberOfStakedValidators
  liquidStakingNetwork__numberOfKnotsThatHaveMintedDerivatives
  validator
  validator__id
  validator__status
  validator__isReadyToStake
  validator__liquidStakingManager
  validator__withdrawn
  validator__currentIndex
  validator__totalETHStaked
  validator__totalETHFundedFromGiantPool
  validator__totalETHFromGiantProtectedStakingPool
  validator__totalETHFromGiantFeesAndMevPool
  validator__giantPoolLastFundedTimestamp
  validator__registerInitialsBlockNumber
  validator__ethSentToDepositContractBlockNumber
  validator__derivativesMintedBlockNumber
  token
  depositor
  totalDeposit
}

type Query {
  liquidStakingNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidStakingNetwork
  liquidStakingNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidStakingNetwork_orderBy
    orderDirection: OrderDirection
    where: LiquidStakingNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidStakingNetwork!]!
  nodeRunner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeRunner
  nodeRunners(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeRunner_orderBy
    orderDirection: OrderDirection
    where: NodeRunner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeRunner!]!
  smartWallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SmartWallet
  smartWallets(
    skip: Int = 0
    first: Int = 100
    orderBy: SmartWallet_orderBy
    orderDirection: OrderDirection
    where: SmartWallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SmartWallet!]!
  lsdvalidator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LSDValidator
  lsdvalidators(
    skip: Int = 0
    first: Int = 100
    orderBy: LSDValidator_orderBy
    orderDirection: OrderDirection
    where: LSDValidator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LSDValidator!]!
  protectedDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtectedDeposit
  protectedDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtectedDeposit_orderBy
    orderDirection: OrderDirection
    where: ProtectedDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtectedDeposit!]!
  feesAndMevDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeesAndMevDeposit
  feesAndMevDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: FeesAndMevDeposit_orderBy
    orderDirection: OrderDirection
    where: FeesAndMevDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeesAndMevDeposit!]!
  giantSavETHPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantSavETHPool
  giantSavETHPools(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantSavETHPool_orderBy
    orderDirection: OrderDirection
    where: GiantSavETHPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantSavETHPool!]!
  giantFeesAndMevPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantFeesAndMevPool
  giantFeesAndMevPools(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantFeesAndMevPool_orderBy
    orderDirection: OrderDirection
    where: GiantFeesAndMevPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantFeesAndMevPool!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  lptoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LPToken
  lptokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LPToken_orderBy
    orderDirection: OrderDirection
    where: LPToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LPToken!]!
  protectedBatch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtectedBatch
  protectedBatches(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtectedBatch_orderBy
    orderDirection: OrderDirection
    where: ProtectedBatch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtectedBatch!]!
  feesAndMevBatch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeesAndMevBatch
  feesAndMevBatches(
    skip: Int = 0
    first: Int = 100
    orderBy: FeesAndMevBatch_orderBy
    orderDirection: OrderDirection
    where: FeesAndMevBatch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeesAndMevBatch!]!
  giantLiquidityProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantLiquidityProvider
  giantLiquidityProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantLiquidityProvider_orderBy
    orderDirection: OrderDirection
    where: GiantLiquidityProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantLiquidityProvider!]!
  giantFeesAndMevLiquidityProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantFeesAndMevLiquidityProvider
  giantFeesAndMevLiquidityProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantFeesAndMevLiquidityProvider_orderBy
    orderDirection: OrderDirection
    where: GiantFeesAndMevLiquidityProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantFeesAndMevLiquidityProvider!]!
  depositor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  syndicate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Syndicate
  syndicates(
    skip: Int = 0
    first: Int = 100
    orderBy: Syndicate_orderBy
    orderDirection: OrderDirection
    where: Syndicate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Syndicate!]!
  payout(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payout
  payouts(
    skip: Int = 0
    first: Int = 100
    orderBy: Payout_orderBy
    orderDirection: OrderDirection
    where: Payout_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payout!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SmartWallet {
  id: ID!
  liquidStakingNetwork: LiquidStakingNetwork!
  nodeRunner: NodeRunner!
  availableToStake: BigInt!
  inProcessOfAwaitingActivation: BigInt!
}

input SmartWallet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidStakingNetwork: String
  liquidStakingNetwork_not: String
  liquidStakingNetwork_gt: String
  liquidStakingNetwork_lt: String
  liquidStakingNetwork_gte: String
  liquidStakingNetwork_lte: String
  liquidStakingNetwork_in: [String!]
  liquidStakingNetwork_not_in: [String!]
  liquidStakingNetwork_contains: String
  liquidStakingNetwork_contains_nocase: String
  liquidStakingNetwork_not_contains: String
  liquidStakingNetwork_not_contains_nocase: String
  liquidStakingNetwork_starts_with: String
  liquidStakingNetwork_starts_with_nocase: String
  liquidStakingNetwork_not_starts_with: String
  liquidStakingNetwork_not_starts_with_nocase: String
  liquidStakingNetwork_ends_with: String
  liquidStakingNetwork_ends_with_nocase: String
  liquidStakingNetwork_not_ends_with: String
  liquidStakingNetwork_not_ends_with_nocase: String
  liquidStakingNetwork_: LiquidStakingNetwork_filter
  nodeRunner: String
  nodeRunner_not: String
  nodeRunner_gt: String
  nodeRunner_lt: String
  nodeRunner_gte: String
  nodeRunner_lte: String
  nodeRunner_in: [String!]
  nodeRunner_not_in: [String!]
  nodeRunner_contains: String
  nodeRunner_contains_nocase: String
  nodeRunner_not_contains: String
  nodeRunner_not_contains_nocase: String
  nodeRunner_starts_with: String
  nodeRunner_starts_with_nocase: String
  nodeRunner_not_starts_with: String
  nodeRunner_not_starts_with_nocase: String
  nodeRunner_ends_with: String
  nodeRunner_ends_with_nocase: String
  nodeRunner_not_ends_with: String
  nodeRunner_not_ends_with_nocase: String
  nodeRunner_: NodeRunner_filter
  availableToStake: BigInt
  availableToStake_not: BigInt
  availableToStake_gt: BigInt
  availableToStake_lt: BigInt
  availableToStake_gte: BigInt
  availableToStake_lte: BigInt
  availableToStake_in: [BigInt!]
  availableToStake_not_in: [BigInt!]
  inProcessOfAwaitingActivation: BigInt
  inProcessOfAwaitingActivation_not: BigInt
  inProcessOfAwaitingActivation_gt: BigInt
  inProcessOfAwaitingActivation_lt: BigInt
  inProcessOfAwaitingActivation_gte: BigInt
  inProcessOfAwaitingActivation_lte: BigInt
  inProcessOfAwaitingActivation_in: [BigInt!]
  inProcessOfAwaitingActivation_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SmartWallet_filter]
  or: [SmartWallet_filter]
}

enum SmartWallet_orderBy {
  id
  liquidStakingNetwork
  liquidStakingNetwork__id
  liquidStakingNetwork__liquidStakingManager
  liquidStakingNetwork__dao
  liquidStakingNetwork__feeRecipientAndSyndicate
  liquidStakingNetwork__savETHPool
  liquidStakingNetwork__feesAndMevPool
  liquidStakingNetwork__stakehouseAddress
  liquidStakingNetwork__optionalGatekeeper
  liquidStakingNetwork__lsdIndex
  liquidStakingNetwork__ticker
  liquidStakingNetwork__commission
  liquidStakingNetwork__isNodeRunningBehindGatekeeper
  liquidStakingNetwork__firstKnot
  liquidStakingNetwork__numberOfValidatorsBeingPrepared
  liquidStakingNetwork__numberOfStakedValidators
  liquidStakingNetwork__numberOfKnotsThatHaveMintedDerivatives
  nodeRunner
  nodeRunner__id
  nodeRunner__name
  availableToStake
  inProcessOfAwaitingActivation
}

type Subscription {
  liquidStakingNetwork(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidStakingNetwork
  liquidStakingNetworks(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidStakingNetwork_orderBy
    orderDirection: OrderDirection
    where: LiquidStakingNetwork_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidStakingNetwork!]!
  nodeRunner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeRunner
  nodeRunners(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeRunner_orderBy
    orderDirection: OrderDirection
    where: NodeRunner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeRunner!]!
  smartWallet(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SmartWallet
  smartWallets(
    skip: Int = 0
    first: Int = 100
    orderBy: SmartWallet_orderBy
    orderDirection: OrderDirection
    where: SmartWallet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SmartWallet!]!
  lsdvalidator(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LSDValidator
  lsdvalidators(
    skip: Int = 0
    first: Int = 100
    orderBy: LSDValidator_orderBy
    orderDirection: OrderDirection
    where: LSDValidator_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LSDValidator!]!
  protectedDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtectedDeposit
  protectedDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtectedDeposit_orderBy
    orderDirection: OrderDirection
    where: ProtectedDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtectedDeposit!]!
  feesAndMevDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeesAndMevDeposit
  feesAndMevDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: FeesAndMevDeposit_orderBy
    orderDirection: OrderDirection
    where: FeesAndMevDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeesAndMevDeposit!]!
  giantSavETHPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantSavETHPool
  giantSavETHPools(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantSavETHPool_orderBy
    orderDirection: OrderDirection
    where: GiantSavETHPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantSavETHPool!]!
  giantFeesAndMevPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantFeesAndMevPool
  giantFeesAndMevPools(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantFeesAndMevPool_orderBy
    orderDirection: OrderDirection
    where: GiantFeesAndMevPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantFeesAndMevPool!]!
  event(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  lptoken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LPToken
  lptokens(
    skip: Int = 0
    first: Int = 100
    orderBy: LPToken_orderBy
    orderDirection: OrderDirection
    where: LPToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LPToken!]!
  protectedBatch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtectedBatch
  protectedBatches(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtectedBatch_orderBy
    orderDirection: OrderDirection
    where: ProtectedBatch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtectedBatch!]!
  feesAndMevBatch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FeesAndMevBatch
  feesAndMevBatches(
    skip: Int = 0
    first: Int = 100
    orderBy: FeesAndMevBatch_orderBy
    orderDirection: OrderDirection
    where: FeesAndMevBatch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FeesAndMevBatch!]!
  giantLiquidityProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantLiquidityProvider
  giantLiquidityProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantLiquidityProvider_orderBy
    orderDirection: OrderDirection
    where: GiantLiquidityProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantLiquidityProvider!]!
  giantFeesAndMevLiquidityProvider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GiantFeesAndMevLiquidityProvider
  giantFeesAndMevLiquidityProviders(
    skip: Int = 0
    first: Int = 100
    orderBy: GiantFeesAndMevLiquidityProvider_orderBy
    orderDirection: OrderDirection
    where: GiantFeesAndMevLiquidityProvider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GiantFeesAndMevLiquidityProvider!]!
  depositor(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Depositor
  depositors(
    skip: Int = 0
    first: Int = 100
    orderBy: Depositor_orderBy
    orderDirection: OrderDirection
    where: Depositor_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Depositor!]!
  syndicate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Syndicate
  syndicates(
    skip: Int = 0
    first: Int = 100
    orderBy: Syndicate_orderBy
    orderDirection: OrderDirection
    where: Syndicate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Syndicate!]!
  payout(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payout
  payouts(
    skip: Int = 0
    first: Int = 100
    orderBy: Payout_orderBy
    orderDirection: OrderDirection
    where: Payout_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payout!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Syndicate {
  id: ID!
  liquidStakingNetwork: LiquidStakingNetwork!
  totalPayout: BigInt!
  payouts(skip: Int = 0, first: Int = 100, orderBy: Payout_orderBy, orderDirection: OrderDirection, where: Payout_filter): [Payout!]!
  totalNodeOperatorPayout: BigInt!
  totalFeesAndMevPayout: BigInt!
}

input Syndicate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidStakingNetwork: String
  liquidStakingNetwork_not: String
  liquidStakingNetwork_gt: String
  liquidStakingNetwork_lt: String
  liquidStakingNetwork_gte: String
  liquidStakingNetwork_lte: String
  liquidStakingNetwork_in: [String!]
  liquidStakingNetwork_not_in: [String!]
  liquidStakingNetwork_contains: String
  liquidStakingNetwork_contains_nocase: String
  liquidStakingNetwork_not_contains: String
  liquidStakingNetwork_not_contains_nocase: String
  liquidStakingNetwork_starts_with: String
  liquidStakingNetwork_starts_with_nocase: String
  liquidStakingNetwork_not_starts_with: String
  liquidStakingNetwork_not_starts_with_nocase: String
  liquidStakingNetwork_ends_with: String
  liquidStakingNetwork_ends_with_nocase: String
  liquidStakingNetwork_not_ends_with: String
  liquidStakingNetwork_not_ends_with_nocase: String
  liquidStakingNetwork_: LiquidStakingNetwork_filter
  totalPayout: BigInt
  totalPayout_not: BigInt
  totalPayout_gt: BigInt
  totalPayout_lt: BigInt
  totalPayout_gte: BigInt
  totalPayout_lte: BigInt
  totalPayout_in: [BigInt!]
  totalPayout_not_in: [BigInt!]
  payouts: [String!]
  payouts_not: [String!]
  payouts_contains: [String!]
  payouts_contains_nocase: [String!]
  payouts_not_contains: [String!]
  payouts_not_contains_nocase: [String!]
  payouts_: Payout_filter
  totalNodeOperatorPayout: BigInt
  totalNodeOperatorPayout_not: BigInt
  totalNodeOperatorPayout_gt: BigInt
  totalNodeOperatorPayout_lt: BigInt
  totalNodeOperatorPayout_gte: BigInt
  totalNodeOperatorPayout_lte: BigInt
  totalNodeOperatorPayout_in: [BigInt!]
  totalNodeOperatorPayout_not_in: [BigInt!]
  totalFeesAndMevPayout: BigInt
  totalFeesAndMevPayout_not: BigInt
  totalFeesAndMevPayout_gt: BigInt
  totalFeesAndMevPayout_lt: BigInt
  totalFeesAndMevPayout_gte: BigInt
  totalFeesAndMevPayout_lte: BigInt
  totalFeesAndMevPayout_in: [BigInt!]
  totalFeesAndMevPayout_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Syndicate_filter]
  or: [Syndicate_filter]
}

enum Syndicate_orderBy {
  id
  liquidStakingNetwork
  liquidStakingNetwork__id
  liquidStakingNetwork__liquidStakingManager
  liquidStakingNetwork__dao
  liquidStakingNetwork__feeRecipientAndSyndicate
  liquidStakingNetwork__savETHPool
  liquidStakingNetwork__feesAndMevPool
  liquidStakingNetwork__stakehouseAddress
  liquidStakingNetwork__optionalGatekeeper
  liquidStakingNetwork__lsdIndex
  liquidStakingNetwork__ticker
  liquidStakingNetwork__commission
  liquidStakingNetwork__isNodeRunningBehindGatekeeper
  liquidStakingNetwork__firstKnot
  liquidStakingNetwork__numberOfValidatorsBeingPrepared
  liquidStakingNetwork__numberOfStakedValidators
  liquidStakingNetwork__numberOfKnotsThatHaveMintedDerivatives
  totalPayout
  payouts
  totalNodeOperatorPayout
  totalFeesAndMevPayout
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}